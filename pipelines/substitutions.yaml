# To execute this pipeline, from repo directory shell something like:
# pypyr substitutions key1="this is key1 in context" key2=pipe
context_parser: pypyr.parser.keyvaluepairs
steps:
  - name: pypyr.steps.safeshell
    description: substitute {key1} and {key2} for their values in context
    in:
      cmd: echo {key1} and {key2}
  - name: pypyr.steps.shell
    description: substitute {key2} for its value in context
    in:
      cmd: ls | grep {key2}; echo if you had something {key2}-ey it should show up;
  - name: pypyr.steps.safeshell
    description: escape literal curlies by doubling - output is "{key1}"
    in:
      cmd: echo {{key1}}
  - name: pypyr.steps.echo
    description: be sure to put quotes around a format string specified in yaml if the 1st character is a {
    in:
      bareEchoValue: echo!
      echoMe: '{bareEchoValue}'
  - name: pypyr.steps.shell
    description: substitute ENV variables with double braces, or just straight-up with $
    in:
      cmd: echo this is the env variable $USER - ${{USER}};
  - name: pypyr.steps.echo
    description: >
                use a sic string not to format any {values}. Do watch the
                use of the yaml literal with block chomping indicator |- to
                prevent the last character in the string from being a LF.
    in:
      echoMe: !sic |-

              {
                "key1": "key1 value with a {curly}"
              }
  - name: pypyr.steps.echo
    description: use a sic string not to format any {values} on one line. No need to escape further quotes.
    in:
      echoMe: !sic string with a {curly} with ", ' and & and double quote at end:"
  - name: pypyr.steps.echo
    description: substitute nested dicts
    in:
      root:
        key1:
          key1.2: this is a value from a dict inside a dict inside a dict
      echoMe: 'you can also reference values nested deep in a dict hierarchy: {root[key1][key1.2]}'
  - name: pypyr.steps.echo
    description: substitute nested values
    in:
      root:
        - list index 0
        - key1: this is a value from a dict containing a list, which contains a dict at index 1
      echoMe: 'you can also reference values nested in a hierarchy of different types: {root[1][key1]}'
  - name: pypyr.steps.echo
    description: use a sic string with a single quote.
    in:
      echoMe: !sic 'string with {curlies} inside single quotes, : colon, quote ", backslash \.'
  - name: pypyr.steps.echo
    description: use a sic string with a double quote. Double up the backslashes!
    in:
      echoMe: !sic "string with {curlies} inside double quotes, : colon, quote \", backslash \\."
