# To execute this pipeline, from repo directory shell something like:
# pypyr substitutions --context "key1=this is key1 in context,key2=pipe"
context_parser: pypyr.parser.keyvaluepairs
steps:
  - name: pypyr.steps.safeshell
    description: substitute {key1} and {key2} for their values in context
    in:
      cmd: echo {key1} and {key2}
  - name: pypyr.steps.shell
    description: substitute {key2} for its value in context
    in:
      cmd: ls | grep {key2}; echo if you had something {key2}-ey it should show up;
  - name: pypyr.steps.safeshell
    description: escape literal curlies by doubling - output is "{key1}"
    in:
      cmd: echo {{key1}}
  - name: pypyr.steps.shell
    description: substitute ENV variables with double braces, or just straight-up with $
    in:
      cmd: echo this is the env variable $USER - ${{USER}};
  - name: pypyr.steps.echo
    description: >
                use a sic string not to format any {values}. Do watch the
                use of the yaml literal with block chomping indicator |- to
                prevent the last character in the string from being a LF. If
                you don't do this, you will end up with the trailing " in your
                output, which in this case would be malformed json.
    in:
      echoMe: |-
              [sic]"
              {
                "key1": "key1 value with a {curly}"
              }"
  - name: pypyr.steps.echo
    description: use a sic string not to format any {values} on one line. No need to escape further quotes.
    in:
      echoMe: '[sic]"string with a {curly} with ", '' and & and double quote at end:""'
