# To execute this pipeline, from repo directory shell something like:
# pypyr contextset invalue="passed from the cmd args" --log 20
context_parser: pypyr.parser.keyvaluepairs
steps:
  - name: pypyr.steps.contextsetf
    comment: contextsetf allows you to manipulate the value as you assign it.
    in:
      contextSetf:
        newKey: 'XXX {invalue} XXX'
  - name: pypyr.steps.contextsetf
    comment: use py strings for conditional and ternary assignments.
    in:
      arb1: null
      arb2: ''
      arb4: [1,1,2,3,5,8]
      contextSetf:
        arb3: eggymyvalue # you can now use arb3 below in this same contextSetf step
        fromArb: '{arb3}'
        isNull: !py arb1 is None # make a bool based on None
        isEmpty: !py bool(arb2) # use truthy, empty strings are false
        ternaryResult: !py "'eggs' if arb3 == 'eggymyvalue' else 'ham'"
        isIn: !py 10 in arb4 # bool if thing in list
  - name: pypyr.steps.debug
    in:
      debug:
        keys:
          - fromArb
          - isNull
          - isEmpty
          - ternaryResult
          - isIn
  - name: pypyr.steps.contextsetf
    comment: you can set multiple nested levels with contextsetf
    in:
      contextSetf:
        lvl1:
          lvl2:
            lvl3: '{arb3}'
  - name: pypyr.steps.debug
    in:
      debug:
        keys:
          - lvl1
