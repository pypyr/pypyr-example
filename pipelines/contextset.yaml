# To execute this pipeline, from repo directory shell something like:
# pypyr contextset "invalue='passed from the cmd args'"
context_parser: pypyr.parser.keyvaluepairs
steps:
  - name: pypyr.steps.contextset
    description: set echoMe from the input context value of invalue
    in:
      contextSet:
        echoMe: invalue
  - pypyr.steps.echo # this should echo echoMe, which now has the same value as invalue
  - name: pypyr.steps.contextsetf
    description: contextsetf allows you to manipulate the value as you assign it.
    in:
      contextSetf:
        newKey: 'XXX {invalue} XXX'
  - name: pypyr.steps.contextset
    description: set echoMe from the newKey value
    in:
      contextSet:
        echoMe: newKey
  - pypyr.steps.echo # this should echo echoMe, which now has the same value as XXX+invalue+XXX
  - name: pypyr.steps.contextsetf
    description: use py strings for conditional and ternary assignments.
    in:
      arb1: null
      arb2: ''
      arb3: eggymyvalue
      arb4: [1,1,2,3,5,8]
      contextSetf:
        isNull: !py arb1 is None # make a bool based on None
        isEmpty: !py bool(arb2) # use truthy, empty strings are false
        ternaryResult: !py "'eggs' if arb3 == 'eggymyvalue' else 'ham'"
        isIn: !py 10 in arb4 # bool if thing in list
  - name: pypyr.steps.debug
    in:
      debug:
        keys:
          - isNull
          - isEmpty
          - ternaryResult
          - isIn
