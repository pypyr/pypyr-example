steps:
  - name: pypyr.steps.contextsetf
    description: initializing values to assert on further down. . .
    in:
      contextSetf:
        statusValue: False
        string1: value1
        string2: value1
        complexThing1:
          - thing1
          - k1: value1
            k2: value2
            k3:
              - sub list 1
              - sub list 2
        complexThing2:
          - thing1
          - k1: value1
            k2: value2
            k3:
              - sub list 1
              - sub list 2
  - name: pypyr.steps.assert
    in:
      assert: True
  - name: pypyr.steps.assert
    description: if assert contains a dict with `this`, evaluates `this` as truthy
    in:
      replaceMe: True
      assert: '{replaceMe}'
  - name: pypyr.steps.assert
    description: setting assert to an arbitrary mapping evaluates the whole mapping as truthy.
    in:
      arb_dict:
        adict: with
        no_this: key
        and_no: equals_key
      assert: '{arb_dict}'
  - name: pypyr.steps.assert
    description: string substitutions - different variables resolve to same value.
    in:
      k1: value 1
      k11: value 1
      k2: value 2
      assert:
        this: '{k1}'
        equals: '{k11}'
  - name: pypyr.steps.assert
    description: numbers are equal
    in:
      assert:
          this: 123
          equals: 0123.0
  - name: pypyr.steps.assert
    description: compare two complex types - list with nested dictionaries.
    in:
      assert:
        this: '{complexThing1}'
        equals: '{complexThing2}'
  - name: pypyr.steps.assert
    description: numbers are equal
    in:
      assert:
        this: 123
        equals: 123.0
  - name: pypyr.steps.assert
    description: compare an int and an int fetched by a str formatting expression.
    in:
      meaningOfLife: 42
      assert:
        this: '{meaningOfLife}'
        equals: 42
  - name: pypyr.steps.echo
    in:
      echoMe: the next negative assert will stop the pipeline
  - name: pypyr.steps.assert
    description: you shall not pass!
    in:
      assert: '{statusValue}'
  - name: pypyr.steps.echo
    in:
      echoMe: if you made it this far, something went wrong.
