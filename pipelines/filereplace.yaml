# WARNING: Will be working with ./out dir - if you have anything in there you
# want to keep or not potentially overwrite, don't run this.
# To execute this pipeline, from repo directory shell something like:
# pypyr filereplace
# notice that using a context format expression to assign the value of
# context['k1'] to ZZZ when doing the replacement
steps:
  - name: pypyr.steps.filereplace
    in:
      k1: wept
      fileReplace:
        in: ./testfiles/replacements.txt
        out: ./out/replacements.out.txt
        replacePairs:
          XXX: pipe
          YYY: pipe
          ZZZ: "{k1}"
  - name: pypyr.steps.filereplace
    in:
      fileReplace:
        in: ./testfiles/replaceorder.txt
        out: ./out/replacementorder.out.txt
        replacePairs:
          special: SPECIAL
          # later replaces can affect earlier replaces
          SPECIAL: XXX
  - name: pypyr.steps.filereplace
    description: use a list of globs instead of a single input file.
                 each glob in the list fill be expanded.
                 results written to the out directory.
    in:
      fileReplace:
        in:
          - ./testfiles/replace/sub/*.txt
          - ./testfiles/replace/*
        out: ./out/replace/
        replacePairs:
            XXX: pipe
            YYY: pipe
            ZZZ: "{k1}"
            <<ARB>>: sung
            <<ARB2>>: read
            # notice escaping literal curlies by doubling
            '{{arbbraces}}': valleys
            manywords: wrote my happy songs
  - name: pypyr.steps.safeshell
    description: in-place edit will overwrite the in-file. make a copy 1st.
    in:
      cmd: cp ./testfiles/replacements.txt ./out/inplaceeditreplacements.txt
  - name: pypyr.steps.filereplace
    description: no out specified, means this will be an in-place edit.
    in:
      fileReplace:
        in: ./out/inplaceeditreplacements.txt
        out:
        replacePairs:
          XXX: pipe
          YYY: pipe
          ZZZ: "{k1}"
